<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>Email Verification</title>
  <link rel="stylesheet" href="/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      color: white;
      background: linear-gradient(145deg, #1a1a2e, #16213e);

    }
      
    .verification-box {
      max-width: 420px;
      margin: 8% auto;
      background-color: #1e1e2f;
      border-radius: 15px;
      padding: 30px;
      box-shadow: 0 0 10px rgba(0, 123, 255, 0.15);
    }

    h4 {
      font-weight: 600;
    }

    .otp-input {
      width: 45px;
      height: 50px;
      font-size: 20px;
      text-align: center;
      background-color: #2d2d3a;
      color: #fff;
      border: none;
      border-radius: 8px;
      margin: 0 5px;
    }

    .otp-input:focus {
      outline: none;
      box-shadow: 0 0 5px #0d6efd;
    }

    .email-box {
      background-color: #003b5b;
      padding: 12px 20px;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      margin-top: 20px;
      font-size: 15px;
      font-weight: 500;
    }

    .btn-submit {
        width: 100%;
        margin-top: 25px;
        font-weight: 500;
        padding: 12px;
        border-radius: 8px;
        background-color: #0d6efd;
        color: white;
        border: none;
        transition: all 0.4s ease-in-out;
        position: relative;
        overflow: hidden;
        z-index: 1;
      }
  
      .btn-submit::before {
        content: "";
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background-color: #003b5b;
        z-index: -1;
        transition: all 0.4s ease-in-out;
      }
  
      .btn-submit:hover::before {
        left: 0;
      }
  
      .btn-submit:hover {
        color: #fff;
        transform: scale(1.03);
        box-shadow: 0 5px 15px rgba(0, 91, 187, 0.3);
      }

    .resend,
    .back-panne {
      font-size: 14px;
      margin-top: 15px;
    }

    .resend a,
    .back-panne a {
      color: #0d6efd;
      text-decoration: none;
    }

    .resend a:hover,
    .back-panne a:hover {
      text-decoration: underline;
    }
  </style>
</head>

<body>
  <section class="main">
  <div class="container">
    <div class="verification-box text-center">
      <h4>Email Verification</h4>
      <p>Please enter the 6-digit code sent to your email.</p>

      <form action="/verify" method="POST">
        <label class="mb-2">Enter your 6-digit code</label>
        <div class="d-flex justify-content-center mb-3">
          <% for (let i = 0; i < 6; i++) { %>
            <input type="text" class="otp-input" maxlength="1" required>
          <% } %>
        </div>

        <input type="hidden" id="hiddenCode" name="code">

        <div class="email-box">
          <i class="fas fa-envelope text-info me-2 fs-5"></i>
          <span><%= email %></span>
        </div>

        <button type="submit" class="btn btn-submit">Verify My Account</button>

        <div class="d-flex justify-content-between mt-3 px-2">
          <div class="resend">Didnâ€™t get the code? <a href="/resend">Resend</a></div>
          <div class="back-panne"><a href="/login">Back to Login</a></div>
        </div>
      </form>
    </div>
  </div>
</section>

  <script>
    const inputs = document.querySelectorAll('.otp-input');
    const hiddenInput = document.getElementById('hiddenCode');

    inputs[0].focus();

    inputs.forEach((input, index) => {
      input.addEventListener('input', () => {
        if (input.value.length === 1 && index < inputs.length - 1) {
          inputs[index + 1].focus();
        }
        updateCode();
      });

      input.addEventListener('keydown', (e) => {
        if (e.key === 'Backspace' && input.value === '' && index > 0) {
          inputs[index - 1].focus();
        }
      });
    });

    function updateCode() {
      const code = Array.from(inputs).map(input => input.value).join('');
      hiddenInput.value = code;
    }
  </script>
</body>

</html>
